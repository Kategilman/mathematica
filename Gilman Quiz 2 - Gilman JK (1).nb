(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    344932,       6818]
NotebookOptionsPosition[    338979,       6718]
NotebookOutlinePosition[    339378,       6734]
CellTagsIndexPosition[    339335,       6731]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
DIG 120: Programming in the Humanities
Davidson College
Dr. Jakub Kabala\
\>", "Subtitle",
 CellChangeTimes->{{3.693742656643436*^9, 3.693742668755063*^9}, {
  3.693841163387773*^9, 3.693841185291279*^9}, {3.725898614698308*^9, 
  3.725898614879366*^9}, {3.756754105309651*^9, 
  3.7567541056327457`*^9}},ExpressionUUID->"b86bb7ce-3c34-4853-8560-\
666bd8d2c98b"],

Cell[TextData[{
 StyleBox["Excellent work. In problem #4, notice that \
ChartStyle\[Rule]{Red,Blue} is sufficient. Remember also about the \
ImageSize-> option.\n",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["A",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]]
}], "Text",
 CellChangeTimes->{{3.821634049462743*^9, 3.821634051225238*^9}, {
  3.8216340891863527`*^9, 
  3.821634124940784*^9}},ExpressionUUID->"39ad26a9-f3d1-431d-a78c-\
58da09a2e21b"],

Cell[CellGroupData[{

Cell["Quiz 2", "Section",
 CellChangeTimes->{{3.694447103344862*^9, 3.694447107817918*^9}, {
  3.725898446324109*^9, 3.725898446628002*^9}, {3.7567539696430397`*^9, 
  3.756753970220169*^9}, {3.820847831940565*^9, 3.820847835490226*^9}, {
  3.820851462920309*^9, 3.820851463285254*^9}, {3.821454054405031*^9, 
  3.8214540544709673`*^9}},ExpressionUUID->"37895bb7-5d19-4eef-9ba5-\
b6958a54d69a"],

Cell[CellGroupData[{

Cell["Guidelines: ", "Subsection",
 CellChangeTimes->{{3.6950521937656517`*^9, 
  3.695052195235099*^9}},ExpressionUUID->"320c29a7-58b0-4773-a88e-\
9f79f9ff6bbe"],

Cell[TextData[StyleBox["You must work alone. ",
 FontWeight->"Bold"]], "Item",
 CellChangeTimes->{{3.695052145313361*^9, 3.695052165404194*^9}, {
  3.6950529293390903`*^9, 3.69505292934445*^9}, {3.820847916421627*^9, 
  3.820847917940022*^9}},ExpressionUUID->"2a37c3bb-d21a-4fe3-841b-\
0aaf0f55ff3c"],

Cell[TextData[{
 "You have",
 StyleBox[" 120 min",
  FontWeight->"Bold"],
 " to complete the quiz. Time begins once you open the Quiz notebook."
}], "Item",
 CellChangeTimes->{{3.695052145313361*^9, 3.695052179865917*^9}, {
  3.6950529581597033`*^9, 3.695052958872034*^9}, {3.756753979639008*^9, 
  3.75675398110191*^9}, {3.820847851747942*^9, 3.820847853945054*^9}, {
  3.8208516955548973`*^9, 
  3.8208517021218348`*^9}},ExpressionUUID->"041839ee-5412-4a8b-bd6c-\
dec99a44bc4b"],

Cell["\<\
This is an open-book quiz: you may consult the Help files in Mathematica, \
course notes, etc. \
\>", "Item",
 CellChangeTimes->{{3.695052145313361*^9, 3.695052188019994*^9}, {
  3.695052856766479*^9, 3.695052860396337*^9}, {3.8208478614778547`*^9, 
  3.820847869702104*^9}, {3.820847902668084*^9, 3.820847906598324*^9}, {
  3.820851708079823*^9, 
  3.820851713621524*^9}},ExpressionUUID->"42b6416d-2115-45a2-9c1d-\
b45072a6b665"],

Cell[TextData[{
 "Due by",
 StyleBox[" Friday, Feb 5th, 5 PM ",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 0]],
 "in the Moodle Assignment drop."
}], "Item",
 CellChangeTimes->{{3.695052145313361*^9, 3.6950522101722097`*^9}, {
  3.7258985189351883`*^9, 3.7258985248942738`*^9}, {3.7567540032075043`*^9, 
  3.756754013785553*^9}, {3.756754115770113*^9, 3.7567541189861717`*^9}, {
  3.8208478801383753`*^9, 3.820847885907477*^9}, {3.8214540768818283`*^9, 
  3.821454079503994*^9}},ExpressionUUID->"28517cb3-5b9c-4de5-8a58-\
7adcc7d1ae96"],

Cell["Fill out the Honor Pledge below", "Item",
 CellChangeTimes->{{3.695052145313361*^9, 3.695052250401148*^9}, {
  3.695052436215866*^9, 3.6950524362160482`*^9}, {3.69505291527278*^9, 
  3.695052924865383*^9}},ExpressionUUID->"9a628969-2c34-471b-9850-\
617d527d7b57"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Honor Pledge (must be signed before you submit):", "Subsection",
 CellChangeTimes->{{3.6950524706800957`*^9, 
  3.695052478086492*^9}},ExpressionUUID->"d46d30f9-ee26-4d75-904d-\
a0222ee77251"],

Cell["\<\
\[OpenCurlyDoubleQuote]I pledge that in completing the problems below I have \
followed the instructions above and adhered to the standards of the Davidson \
Honor Code.\[CloseCurlyDoubleQuote]

Time & date begun: 2:15
Time & date ended: 3:20
Total time spent: 1:05
Your name: Kate Gilman \
\>", "Text",
 CellChangeTimes->{{3.671523743900361*^9, 3.671523752476836*^9}, {
  3.671523848093296*^9, 3.6715239471182337`*^9}, {3.6715270228124638`*^9, 
  3.671527025165537*^9}, {3.671527148078924*^9, 3.671527187993361*^9}, {
  3.695052495903029*^9, 3.695052500861117*^9}, {3.820847892239169*^9, 
  3.820847895940195*^9}, {3.820850853003441*^9, 3.8208508929345083`*^9}, {
  3.8215419514737167`*^9, 3.821541961576193*^9}, {3.8215448600786457`*^9, 
  3.821544877605598*^9}},ExpressionUUID->"72259a4c-cc24-4689-9920-\
94b06be6f4cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problems", "Subsection",
 CellChangeTimes->{{3.820848133518909*^9, 
  3.820848134119884*^9}},ExpressionUUID->"2c75cc1c-5c4c-47b5-ab7d-\
39fd10f92b6a"],

Cell[CellGroupData[{

Cell["\<\
The function Row[...] is very similar to Column[...]. Look it up in the \
Helpfiles. Then make a Row of pie charts with 1, 2 and 3 identical segments:\
\>", "ItemNumbered",
 CellChangeTimes->{{3.8214554469909163`*^9, 3.821455485893735*^9}, {
  3.821455805071424*^9, 3.821455808521351*^9}, {3.821456524826109*^9, 
  3.821456527490986*^9}},ExpressionUUID->"5fe81e2e-d19e-4aba-87d0-\
0b859345d14a"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{DynamicChart`click$151579$151688 = True}, {{
        RGBColor[0.5, 0.5, 1.], 
        EdgeForm[{
          GrayLevel[0], 
          Opacity[0.5]}], {{{}, {
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             GrayLevel[0], 
             Opacity[0.5]}], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    3.141592653589793}]}, 
                   ImageSizeCache -> {{7.25, 82.75}, {-39.75, 35.75}}], 
                  "DelayedMouseEffectStyle"], StatusArea[#, 1]& , TagBoxNote -> 
                 "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> 
                FEPrivate`Set[DynamicChart`click$151579$151688, 
                  FEPrivate`Not[DynamicChart`click$151579$151688]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$151579$151688, {{{1., 0.}, {0., 1.}}, {0.2, 
                0.}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$151579$151688}]], 
            "DelayedClickEffect"]}}, {}}, {}}, {{
         TagBox[
          GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
              StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
              Style[1, {}], "Tooltip"]& ], 
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$151579$151688, 
                FEPrivate`Not[DynamicChart`click$151579$151688]], 
              PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
              True}]], 
           Dynamic[
            FEPrivate`If[
            DynamicChart`click$151579$151688, {{{1., 0.}, {0., 1.}}, {0.2, 
              0.}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$151579$151688}]], 
          "DelayedClickEffect"], {}}, {}}, {}, {}}, 
      DynamicModuleValues :> {}], {{}, {}}, {{{}, {}, {}, {}}, {}}}, 
    ContentSelectable -> False, DisplayFunction -> Identity, GridLinesStyle -> 
    Directive[
      GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
    PlotRangePadding -> Scaled[0.09166666666666669]], 
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{
      DynamicChart`click$151615$151689 = False, 
       DynamicChart`click$151619$151689 = False}, {{
        Directive[
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.5]]]], {{{{{{}, {{
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.982864, 0.7431472, 0.3262672]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    DiskBox[{0, 0}, 1., {0., 3.141592653589793}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 1]& , 
                    TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$151615$151689, 
                    FEPrivate`Not[DynamicChart`click$151615$151689]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$151615$151689, {{{1., 0.}, {0., 1.}}, {
                    1.2246467991473533`*^-17, 0.2}}, {{1, 0}, {0, 1}}, {{1, 
                   0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$151615$151689}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.4992, 0.5552, 0.8309304]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 0.}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 1]& , 
                    TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$151619$151689, 
                    FEPrivate`Not[DynamicChart`click$151619$151689]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$151619$151689, {{{1., 0.}, {0., 1.}}, {
                    1.2246467991473533`*^-17, -0.2}}, {{1, 0}, {0, 1}}, {{1, 
                   0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$151619$151689}]], 
                "DelayedClickEffect"]}}}}}, {}}, {{}}}}, {{{{
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> 
                FEPrivate`Set[DynamicChart`click$151615$151689, 
                  FEPrivate`Not[DynamicChart`click$151615$151689]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$151615$151689, {{{1., 0.}, {0., 1.}}, {
                1.2246467991473533`*^-17, 0.2}}, {{1, 0}, {0, 1}}, {{1, 0}, {
               0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$151615$151689}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> 
                FEPrivate`Set[DynamicChart`click$151619$151689, 
                  FEPrivate`Not[DynamicChart`click$151619$151689]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$151619$151689, {{{1., 0.}, {0., 1.}}, {
                1.2246467991473533`*^-17, -0.2}}, {{1, 0}, {0, 1}}, {{1, 0}, {
               0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$151619$151689}]], 
            "DelayedClickEffect"]}, {}}}, {}}, {}, {}}, 
      DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
    DisplayFunction -> Identity, ContentSelectable -> False, GridLinesStyle -> 
     Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
     PlotRangePadding -> Scaled[0.09166666666666669]}], 
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{
      DynamicChart`click$151657$151690 = False, 
       DynamicChart`click$151661$151690 = False, 
       DynamicChart`click$151665$151690 = False}, {{
        Directive[
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.5]]]], {{{{{{}, {{
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.982864, 0.7431472, 0.3262672]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.0471975511965979`, 
                    3.141592653589793}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$151657$151690, 
                    FEPrivate`Not[DynamicChart`click$151657$151690]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$151657$151690, {{{1., 0.}, {0., 
                    1.}}, {-0.10000000000000003`, 0.17320508075688773`}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$151657$151690}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.784, 0.47519999999999996`, 0.2]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-1.0471975511965974`, 
                    1.0471975511965979`}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$151661$151690, 
                    FEPrivate`Not[DynamicChart`click$151661$151690]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$151661$151690, {{{1., 0.}, {0., 1.}}, {
                    0.2, 4.4408920985006264`*^-17}}, {{1, 0}, {0, 1}}, {{1, 
                   0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$151661$151690}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.4992, 0.5552, 0.8309304]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -1.0471975511965974`}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 1]& , 
                    TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$151665$151690, 
                    FEPrivate`Not[DynamicChart`click$151665$151690]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$151665$151690, {{{1., 0.}, {0., 
                    1.}}, {-0.09999999999999996, -0.17320508075688779`}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$151665$151690}]], 
                "DelayedClickEffect"]}}}}}, {}}, {{}}}}, {{{{
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> 
                FEPrivate`Set[DynamicChart`click$151657$151690, 
                  FEPrivate`Not[DynamicChart`click$151657$151690]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$151657$151690, {{{1., 0.}, {0., 
                1.}}, {-0.10000000000000003`, 0.17320508075688773`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$151657$151690}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> 
                FEPrivate`Set[DynamicChart`click$151661$151690, 
                  FEPrivate`Not[DynamicChart`click$151661$151690]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$151661$151690, {{{1., 0.}, {0., 1.}}, {0.2, 
                4.4408920985006264`*^-17}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 
               1}}], TrackedSymbols :> {DynamicChart`click$151661$151690}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> 
                FEPrivate`Set[DynamicChart`click$151665$151690, 
                  FEPrivate`Not[DynamicChart`click$151665$151690]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$151665$151690, {{{1., 0.}, {0., 
                1.}}, {-0.09999999999999996, -0.17320508075688779`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$151665$151690}]], 
            "DelayedClickEffect"]}, {}}}, {}}, {}, {}}, 
      DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
    DisplayFunction -> Identity, ContentSelectable -> False, GridLinesStyle -> 
     Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
     PlotRangePadding -> Scaled[0.09166666666666669]}]},
  "RowDefault"]], "Output",
 CellChangeTimes->{3.821455510702202*^9},
 CellLabel->
  "Out[187]=",ExpressionUUID->"14cb6647-c7e4-4388-b8f4-fd18eb6ceaf7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Row", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PieChart", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"PieChart", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"PieChart", "[", 
      RowBox[{"{", "1", "}"}], "]"}]}], "}"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.821542311172607*^9, 3.821542353783296*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"0ff04110-ede9-43d2-aec6-478184365530"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{
      DynamicChart`click$20002$20111 = False, DynamicChart`click$20006$20111 = 
       False, DynamicChart`click$20010$20111 = False}, {{
        Directive[
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.5]]]], {{{{{{}, {{
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.982864, 0.7431472, 0.3262672]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.0471975511965979`, 
                    3.141592653589793}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$20002$20111, 
                    FEPrivate`Not[DynamicChart`click$20002$20111]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$20002$20111, {{{1., 0.}, {0., 
                    1.}}, {-0.10000000000000003`, 0.17320508075688773`}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$20002$20111}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.784, 0.47519999999999996`, 0.2]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-1.0471975511965974`, 
                    1.0471975511965979`}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$20006$20111, 
                    FEPrivate`Not[DynamicChart`click$20006$20111]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$20006$20111, {{{1., 0.}, {0., 1.}}, {0.2,
                     4.4408920985006264`*^-17}}, {{1, 0}, {0, 1}}, {{1, 0}, {
                   0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$20006$20111}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.4992, 0.5552, 0.8309304]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -1.0471975511965974`}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 1]& , 
                    TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$20010$20111, 
                    FEPrivate`Not[DynamicChart`click$20010$20111]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$20010$20111, {{{1., 0.}, {0., 
                    1.}}, {-0.09999999999999996, -0.17320508075688779`}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$20010$20111}]], 
                "DelayedClickEffect"]}}}}}, {}}, {{}}}}, {{{{
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$20002$20111, 
                  FEPrivate`Not[DynamicChart`click$20002$20111]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$20002$20111, {{{1., 0.}, {0., 
                1.}}, {-0.10000000000000003`, 0.17320508075688773`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$20002$20111}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$20006$20111, 
                  FEPrivate`Not[DynamicChart`click$20006$20111]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$20006$20111, {{{1., 0.}, {0., 1.}}, {0.2, 
                4.4408920985006264`*^-17}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 
               1}}], TrackedSymbols :> {DynamicChart`click$20006$20111}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$20010$20111, 
                  FEPrivate`Not[DynamicChart`click$20010$20111]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$20010$20111, {{{1., 0.}, {0., 
                1.}}, {-0.09999999999999996, -0.17320508075688779`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$20010$20111}]], 
            "DelayedClickEffect"]}, {}}}, {}}, {}, {}}, 
      DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
    DisplayFunction -> Identity, ContentSelectable -> False, GridLinesStyle -> 
     Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
     PlotRangePadding -> Scaled[0.09166666666666669]}], 
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{
      DynamicChart`click$20050$20112 = False, DynamicChart`click$20054$20112 = 
       False}, {{
        Directive[
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.5]]]], {{{{{{}, {{
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.982864, 0.7431472, 0.3262672]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    DiskBox[{0, 0}, 1., {0., 3.141592653589793}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 1]& , 
                    TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$20050$20112, 
                    FEPrivate`Not[DynamicChart`click$20050$20112]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$20050$20112, {{{1., 0.}, {0., 1.}}, {
                    1.2246467991473533`*^-17, 0.2}}, {{1, 0}, {0, 1}}, {{1, 
                   0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$20050$20112}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.4992, 0.5552, 0.8309304]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 0.}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 1]& , 
                    TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$20054$20112, 
                    FEPrivate`Not[DynamicChart`click$20054$20112]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$20054$20112, {{{1., 0.}, {0., 1.}}, {
                    1.2246467991473533`*^-17, -0.2}}, {{1, 0}, {0, 1}}, {{1, 
                   0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$20054$20112}]], 
                "DelayedClickEffect"]}}}}}, {}}, {{}}}}, {{{{
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$20050$20112, 
                  FEPrivate`Not[DynamicChart`click$20050$20112]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$20050$20112, {{{1., 0.}, {0., 1.}}, {
                1.2246467991473533`*^-17, 0.2}}, {{1, 0}, {0, 1}}, {{1, 0}, {
               0, 1}}], TrackedSymbols :> {DynamicChart`click$20050$20112}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$20054$20112, 
                  FEPrivate`Not[DynamicChart`click$20054$20112]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$20054$20112, {{{1., 0.}, {0., 1.}}, {
                1.2246467991473533`*^-17, -0.2}}, {{1, 0}, {0, 1}}, {{1, 0}, {
               0, 1}}], TrackedSymbols :> {DynamicChart`click$20054$20112}]], 
            "DelayedClickEffect"]}, {}}}, {}}, {}, {}}, 
      DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
    DisplayFunction -> Identity, ContentSelectable -> False, GridLinesStyle -> 
     Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
     PlotRangePadding -> Scaled[0.09166666666666669]}], 
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{DynamicChart`click$20092$20113 = False}, {{
        Directive[
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.5]]]], {{{{{{}, {{
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.982864, 0.7431472, 0.3262672]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    3.141592653589793}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$20092$20113, 
                    FEPrivate`Not[DynamicChart`click$20092$20113]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$20092$20113, {{{1., 0.}, {0., 1.}}, {0.2,
                     0.}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$20092$20113}]], 
                "DelayedClickEffect"]}}}}}, {}}, {{}}}}, {{{{
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                Style[1, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$20092$20113, 
                  FEPrivate`Not[DynamicChart`click$20092$20113]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$20092$20113, {{{1., 0.}, {0., 1.}}, {0.2, 
                0.}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$20092$20113}]], 
            "DelayedClickEffect"]}, {}}}, {}}, {}, {}}, 
      DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
    DisplayFunction -> Identity, ContentSelectable -> False, GridLinesStyle -> 
     Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
     PlotRangePadding -> Scaled[0.09166666666666669]}]},
  "RowDefault"]], "Output",
 CellChangeTimes->{3.8215423547677183`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"55d0652a-4cb0-4f9b-a8d3-3530f6b4ae03"]
}, Open  ]]
}, Open  ]],

Cell["", "ItemNumbered",
 CellChangeTimes->{{3.8214554469909163`*^9, 3.821455489132227*^9}, {
   3.821455627086459*^9, 3.821455634733976*^9}, {3.821455815037333*^9, 
   3.8214558169904413`*^9}, {3.8214558844107924`*^9, 3.821455987578899*^9}, {
   3.821456052246052*^9, 3.821456052299116*^9}, {3.821456158412418*^9, 
   3.8214561584133797`*^9}, 
   3.821456536072167*^9},ExpressionUUID->"708e6fc6-7a1c-4ec7-affa-\
236ed8fe5dcd"],

Cell["\<\
You can use the Graphics[...] function to create and style shapes. Here, for \
example, is a red disk:\
\>", "Text",
 CellChangeTimes->{{3.821456170945881*^9, 3.82145621307028*^9}, {
   3.821456289812801*^9, 3.821456300743586*^9}, 
   3.821456534927598*^9},ExpressionUUID->"12e2fe76-85a0-4065-9447-\
79c98083a085"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"{", 
   RowBox[{"Red", ",", 
    RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.821456159841401*^9, 3.8214561921344557`*^9}},
 CellLabel->
  "In[196]:=",ExpressionUUID->"dead6932-3629-451c-a20e-5f663f8b7a46"],

Cell[BoxData[
 GraphicsBox[
  {RGBColor[1, 0, 0], DiskBox[{0, 0}]}]], "Output",
 CellChangeTimes->{{3.821456184772148*^9, 3.8214561923979273`*^9}},
 CellLabel->
  "Out[196]=",ExpressionUUID->"8e15642e-c641-4f38-8739-9b14777e5f25"]
}, Open  ]],

Cell["and here is a blue triangle:", "Text",
 CellChangeTimes->{{3.8214561740160007`*^9, 3.8214562199506817`*^9}, {
  3.8214563032047997`*^9, 
  3.821456303957226*^9}},ExpressionUUID->"bfbb293a-ba49-48f2-a7ed-\
b83fcf3e03fa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"{", 
   RowBox[{"Blue", ",", 
    RowBox[{"RegularPolygon", "[", "3", "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.821456235618022*^9, 3.8214562528916607`*^9}},
 CellLabel->
  "In[200]:=",ExpressionUUID->"e3955862-485a-4a44-a1df-3f1682fdfab9"],

Cell[BoxData[
 GraphicsBox[
  {RGBColor[0, 0, 1], 
   InterpretationBox[
    PolygonBox[
     NCache[{{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {0, 1}, {
       Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
       0.8660254037844386, -0.5}, {0, 1}, {-0.8660254037844386, -0.5}}]],
    RegularPolygon[3]]}]], "Output",
 CellChangeTimes->{{3.8214562474690228`*^9, 3.821456253153062*^9}},
 CellLabel->
  "Out[200]=",ExpressionUUID->"038c920c-7a7f-4513-8b71-e659f2840f20"]
}, Open  ]],

Cell["\<\
The function Framed[...], meanwhile, will... put a frame around anything. For \
example:\
\>", "Text",
 CellChangeTimes->{{3.821456468618535*^9, 3.821456493922576*^9}, {
  3.821457536341956*^9, 
  3.821457539804103*^9}},ExpressionUUID->"bc8a4580-53ad-4fcf-b3f9-\
23039b40df8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Framed", "[", "\"\<hello\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.821456495581642*^9, 3.821456496603704*^9}, {
  3.8214578123407993`*^9, 3.821457813273019*^9}},
 CellLabel->
  "In[248]:=",ExpressionUUID->"83f7e64f-f269-46af-84c9-4f0dfb18991a"],

Cell[BoxData[
 FrameBox["\<\"hello\"\>",
  StripOnInput->False]], "Output",
 CellChangeTimes->{3.8214564968772383`*^9, 3.821457813532968*^9},
 CellLabel->
  "Out[248]=",ExpressionUUID->"cbb761f1-4ddf-443b-aaf3-2dd3e2063133"]
}, Open  ]],

Cell[TextData[{
 "Study all the code above. Then, using a combination of Row[...], \
Column[...], Graphics[...], and Framed[...], create the following output (",
 StyleBox["NB: the polygons are pentagons...",
  FontSlant->"Italic"],
 "):"
}], "Text",
 CellChangeTimes->{{3.8214562558881702`*^9, 3.8214563315915623`*^9}, {
  3.821456382561535*^9, 3.821456383623044*^9}, {3.8214565056376963`*^9, 
  3.8214565110654707`*^9}, {3.8214565950613537`*^9, 3.821456601537653*^9}, {
  3.821456667420594*^9, 
  3.821456668929893*^9}},ExpressionUUID->"2816b150-870d-42d3-8f70-\
5b0281b4219c"],

Cell[BoxData[
 FrameBox[
  TemplateBox[{
    TagBox[
     GridBox[{{
        GraphicsBox[{
          RGBColor[0, 0, 1], 
          DiskBox[{0, 0}]}]}, {
        GraphicsBox[{
          RGBColor[1, 0, 0], 
          InterpretationBox[
           PolygonBox[
            
            NCache[{{(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
               Rational[1, 2], 
               Rational[1, 4] (-1 - 5^Rational[1, 2])}, {(Rational[5, 8] + 
                Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2], 
               Rational[1, 4] (-1 + 5^Rational[1, 2])}, {0, 
              1}, {-(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
                Rational[1, 2], 
               Rational[1, 4] (-1 + 
                5^Rational[1, 2])}, {-(Rational[5, 8] + 
                 Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2], 
               Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
              0.5877852522924731, -0.8090169943749475}, {0.9510565162951535, 
              0.30901699437494745`}, {0, 1}, {-0.9510565162951535, 
              0.30901699437494745`}, {-0.5877852522924731, \
-0.8090169943749475}}]], 
           RegularPolygon[5]]}]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
      "Column", 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
    TagBox[
     GridBox[{{
        GraphicsBox[{
          RGBColor[1, 0, 0], 
          InterpretationBox[
           PolygonBox[
            
            NCache[{{(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
               Rational[1, 2], 
               Rational[1, 4] (-1 - 5^Rational[1, 2])}, {(Rational[5, 8] + 
                Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2], 
               Rational[1, 4] (-1 + 5^Rational[1, 2])}, {0, 
              1}, {-(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
                Rational[1, 2], 
               Rational[1, 4] (-1 + 
                5^Rational[1, 2])}, {-(Rational[5, 8] + 
                 Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2], 
               Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
              0.5877852522924731, -0.8090169943749475}, {0.9510565162951535, 
              0.30901699437494745`}, {0, 1}, {-0.9510565162951535, 
              0.30901699437494745`}, {-0.5877852522924731, \
-0.8090169943749475}}]], 
           RegularPolygon[5]]}]}, {
        GraphicsBox[{
          RGBColor[0, 0, 1], 
          DiskBox[{0, 0}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
      DefaultBaseStyle -> "Column", 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]},
   "RowDefault"],
  StripOnInput->False]], "Input",
 CellChangeTimes->{{3.821457779094451*^9, 3.821457793552556*^9}},
 CellLabel->
  "In[247]:=",ExpressionUUID->"5d4e8311-b2cf-4f19-8d1f-a5414ce174a6"],

Cell[BoxData[
 RowBox[{"Row", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Graphics", "[", 
     RowBox[{"{", 
      RowBox[{"Blue", ",", "Disk"}], "}"}], "]"}], ",", 
    RowBox[{"Graphics", "[", 
     RowBox[{"{", 
      RowBox[{"Red", ",", 
       RowBox[{"Polygon", "[", "5", "]"}]}], "}"}], "]"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.821542397629488*^9, 3.821542566811841*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"3f9d6a65-e3f1-4bf4-8c46-30c6576ea8dc"],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"{", 
   RowBox[{"Red", ",", "Polygon"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.821542738482222*^9, 3.821542746599571*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"4842712b-d60e-4a71-b63a-1807e4ee26dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Row", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{"Blue", ",", 
          RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{"Red", ",", 
          RowBox[{"RegularPolygon", "[", "5", "]"}]}], "}"}], "]"}]}], "}"}], 
     "]"}], "}"}], ",", 
   RowBox[{"Row", "[", 
    RowBox[{
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{"Red", ",", 
        RowBox[{"RegularPolygon", "[", "5", "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{"Blue", ",", 
         RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}], "}"}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.821542637345174*^9, 3.8215426639373693`*^9}, {
  3.821542701898361*^9, 3.8215427294169197`*^9}, {3.821542765685012*^9, 
  3.821542819097991*^9}, {3.8215428514126873`*^9, 3.821542935562368*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"b50a69a0-10b6-441c-81b6-05c0b6cc158e"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       GraphicsBox[{
         RGBColor[0, 0, 1], 
         DiskBox[{0, 0}]}], 
       GraphicsBox[{
         RGBColor[1, 0, 0], 
         InterpretationBox[
          PolygonBox[
           
           NCache[{{(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
              Rational[1, 2], 
              Rational[1, 4] (-1 - 5^Rational[1, 2])}, {(Rational[5, 8] + 
               Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2], 
              Rational[1, 4] (-1 + 5^Rational[1, 2])}, {0, 
             1}, {-(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
               Rational[1, 2], 
              Rational[1, 4] (-1 + 
               5^Rational[1, 2])}, {-(Rational[5, 8] + 
                Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2], 
              Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
             0.5877852522924731, -0.8090169943749475}, {0.9510565162951535, 
             0.30901699437494745`}, {0, 1}, {-0.9510565162951535, 
             0.30901699437494745`}, {-0.5877852522924731, \
-0.8090169943749475}}]], 
          RegularPolygon[5]]}]},
      "RowDefault"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{
        Row[
         Graphics[{
           RGBColor[1, 0, 0], 
           RegularPolygon[5]}], {
          Graphics[{
            RGBColor[0, 0, 1], 
            Disk[{0, 0}]}]}]}}, "Rows" -> {{
        Row[
         Graphics[{
           RGBColor[1, 0, 0], 
           RegularPolygon[5]}], {
          Graphics[{
            RGBColor[0, 0, 1], 
            Disk[{0, 0}]}]}]}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{
  3.8215426668742237`*^9, 3.821542731718898*^9, {3.821542806843809*^9, 
   3.82154282117908*^9}, 3.8215428562625103`*^9, 3.821542943900537*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"d2c2b715-c4c5-4735-80aa-ec6ef1378866"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Framed", "[", 
  RowBox[{"Column", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}], ",", 
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{"Red", ",", 
           RowBox[{"RegularPolygon", "[", "5", "]"}]}], "}"}], "]"}]}], "}"}],
       "]"}], ",", 
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{"Red", ",", 
           RowBox[{"RegularPolygon", "[", "5", "]"}]}], "}"}], "]"}], ",", 
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}]}], "}"}], "]"}]}], 
    "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.821542991464477*^9, 3.821543107131394*^9}, {
  3.821543143321157*^9, 3.821543183285199*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"fa683601-e312-4400-8213-4ede4a931491"],

Cell[BoxData[
 FrameBox[
  TagBox[GridBox[{
     {
      TemplateBox[{
        GraphicsBox[{
          RGBColor[0, 0, 1], 
          DiskBox[{0, 0}]}], 
        GraphicsBox[{
          RGBColor[1, 0, 0], 
          InterpretationBox[
           PolygonBox[
            
            NCache[{{(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
               Rational[1, 2], 
               Rational[1, 4] (-1 - 5^Rational[1, 2])}, {(Rational[5, 8] + 
                Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2], 
               Rational[1, 4] (-1 + 5^Rational[1, 2])}, {0, 
              1}, {-(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
                Rational[1, 2], 
               Rational[1, 4] (-1 + 
                5^Rational[1, 2])}, {-(Rational[5, 8] + 
                 Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2], 
               Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
              0.5877852522924731, -0.8090169943749475}, {0.9510565162951535, 
              0.30901699437494745`}, {0, 1}, {-0.9510565162951535, 
              0.30901699437494745`}, {-0.5877852522924731, \
-0.8090169943749475}}]], 
           RegularPolygon[5]]}]},
       "RowDefault"]},
     {
      TemplateBox[{
        GraphicsBox[{
          RGBColor[1, 0, 0], 
          InterpretationBox[
           PolygonBox[
            
            NCache[{{(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
               Rational[1, 2], 
               Rational[1, 4] (-1 - 5^Rational[1, 2])}, {(Rational[5, 8] + 
                Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2], 
               Rational[1, 4] (-1 + 5^Rational[1, 2])}, {0, 
              1}, {-(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
                Rational[1, 2], 
               Rational[1, 4] (-1 + 
                5^Rational[1, 2])}, {-(Rational[5, 8] + 
                 Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2], 
               Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
              0.5877852522924731, -0.8090169943749475}, {0.9510565162951535, 
              0.30901699437494745`}, {0, 1}, {-0.9510565162951535, 
              0.30901699437494745`}, {-0.5877852522924731, \
-0.8090169943749475}}]], 
           RegularPolygon[5]]}], 
        GraphicsBox[{
          RGBColor[0, 0, 1], 
          DiskBox[{0, 0}]}]},
       "RowDefault"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.8215431117588167`*^9, {3.821543152929912*^9, 3.821543184047723*^9}},
 CellLabel->"Out[26]=",ExpressionUUID->"13a92655-453d-46f5-b2d0-dbca225a3bd0"]
}, Open  ]],

Cell[BoxData[
 TemplateBox[{""},
  "RowDefault"]], "Input",
 CellChangeTimes->{{3.821543119616012*^9, 
  3.8215431196170263`*^9}},ExpressionUUID->"07553e60-03bf-4090-9b23-\
07cd36aed42e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.821542584960112*^9, 
  3.821542605187254*^9}},ExpressionUUID->"922f6c22-b746-44c9-9ff5-\
c82969c1e88e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.821542973982452*^9, 
  3.821542979862913*^9}},ExpressionUUID->"4eda6e6b-43cc-4b8f-a7fc-\
b02a4af14ec1"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.821542599862262*^9, 
  3.82154260022794*^9}},ExpressionUUID->"390afc1f-d0cc-4174-9eb1-\
4d798fe367a2"],

Cell[CellGroupData[{

Cell["\<\
Here is a list representing the numbers gold medals won by the United States \
at each Summer Olympics going back to 1984: \
\>", "ItemNumbered",
 CellChangeTimes->{{3.8214554469909163`*^9, 3.821455489132227*^9}, {
   3.821455627086459*^9, 3.821455634733976*^9}, {3.821455815037333*^9, 
   3.8214558169904413`*^9}, {3.8214558844107924`*^9, 3.821455987578899*^9}, {
   3.821456052246052*^9, 3.821456052299116*^9}, {3.8214566875982647`*^9, 
   3.8214567443623877`*^9}, 
   3.821456775623992*^9},ExpressionUUID->"6460263c-6c78-4d25-98ac-\
c1c1d37fe8a5"],

Cell[BoxData[
 RowBox[{"medals", "=", 
  RowBox[{"{", 
   RowBox[{
   "83", ",", "36", ",", "37", ",", "44", ",", "37", ",", "36", ",", "36", 
    ",", "46", ",", "46"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8214567672301693`*^9, 3.821456769665119*^9}, 
   3.8215437212739487`*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"1e203a68-aa8e-4530-91ea-3d4a6c4ece6c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "83", ",", "36", ",", "37", ",", "44", ",", "37", ",", "36", ",", "36", 
    ",", "46", ",", "46"}], "}"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8215437235698423`*^9, 
  3.821543723570908*^9}},ExpressionUUID->"cab08cb4-fb8b-43e4-844e-\
132e8a843c6d"],

Cell[CellGroupData[{

Cell[BoxData["medals"], "Input",
 CellChangeTimes->{{3.82154372624124*^9, 3.821543726948146*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"dbc48f68-da6a-441e-8693-d25f52bcfbbf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "83", ",", "36", ",", "37", ",", "44", ",", "37", ",", "36", ",", "36", ",",
    "46", ",", "46"}], "}"}]], "Output",
 CellChangeTimes->{3.821543727688032*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"a296d21c-370f-4271-bf58-2bcb848c9201"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Using Range[ ...], generate the following list, which contains the actual \
years in which Summer Olympics have been held going back to 1984. Save that \
list  it into a symbol called ' years' .

\t{1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016}\
\>", "Text",
 CellChangeTimes->{{3.8214554469909163`*^9, 3.821455489132227*^9}, {
  3.821455627086459*^9, 3.821455634733976*^9}, {3.821455815037333*^9, 
  3.8214558169904413`*^9}, {3.8214558844107924`*^9, 3.821455987578899*^9}, {
  3.821456052246052*^9, 3.821456052299116*^9}, {3.8214566875982647`*^9, 
  3.8214567221068907`*^9}, {3.821456778225016*^9, 
  3.821456838831295*^9}},ExpressionUUID->"fd5e17b4-688d-40ab-8ab1-\
ecf7b314aa77"],

Cell[BoxData[
 RowBox[{"years", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"1984", ",", "2016", ",", "4"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.821456796001692*^9, 3.821456796421836*^9}, {
   3.821456962615918*^9, 3.8214569730461903`*^9}, 3.8215433796950703`*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"e1160738-538e-4c9e-8738-ad034740b914"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "1984", ",", "1988", ",", "1992", ",", "1996", ",", "2000", ",", "2004", 
    ",", "2008", ",", "2012", ",", "2016"}], "}"}], "\[IndentingNewLine]"}]], \
"Input",
 CellChangeTimes->{{3.821543384189149*^9, 
  3.821543384189999*^9}},ExpressionUUID->"efc50fdd-a0e7-484e-aa63-\
cafc7dcdeb80"],

Cell[CellGroupData[{

Cell[BoxData["years"], "Input",
 CellChangeTimes->{{3.8215433889484158`*^9, 3.821543389492463*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"f0662045-bd21-472e-930a-34dea130e542"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1984", ",", "1988", ",", "1992", ",", "1996", ",", "2000", ",", "2004", 
   ",", "2008", ",", "2012", ",", "2016"}], "}"}]], "Output",
 CellChangeTimes->{3.821543390935494*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"4715d376-a802-437b-8405-5ed20e7395de"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Look up BarChart3D in the HelpFiles and spend some time studying the Examples \
and Options. Then, using \[OpenCurlyQuote]medals\[CloseCurlyQuote] and \
\[OpenCurlyQuote]years\[CloseCurlyQuote], create a well styled and labeled 3D \
BarChart in which you plot the number of US Gold Medals per Olympic year \
going back to 1984. Include options in order to make your chart creative and \
aesthetically pleasing.  \
\>", "ItemNumbered",
 CellChangeTimes->{{3.8214554469909163`*^9, 3.821455489132227*^9}, {
   3.821455627086459*^9, 3.821455634733976*^9}, {3.821455815037333*^9, 
   3.8214558169904413`*^9}, {3.821456102272189*^9, 3.821456115771533*^9}, {
   3.821456861157056*^9, 3.821456952821785*^9}, {3.821457060417706*^9, 
   3.821457075472905*^9}, {3.821457722704637*^9, 3.821457731258813*^9}, 
   3.821457854674924*^9},ExpressionUUID->"c1eb0107-43b1-4db7-877e-\
c7f587240c0b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart3D", "[", 
  RowBox[{"medals", ",", 
   RowBox[{"ChartLabels", "\[Rule]", " ", 
    RowBox[{"Placed", "[", 
     RowBox[{"years", ",", "Center"}], "]"}]}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Red", ",", "Blue", ",", "Red", ",", "Blue", ",", "Red", ",", "Blue", 
      ",", "Red", ",", "Blue", ",", "Red"}], "}"}]}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", 
    RowBox[{"Directive", "[", 
     RowBox[{"EdgeForm", "[", "White", "]"}], "]"}]}], ",", 
   RowBox[{"Background", "\[Rule]", " ", "White"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", " ", "\"\<US Olympic Gold Metals\>\""}], 
   ",", 
   RowBox[{"LabelStyle", "->", 
    RowBox[{"Directive", "[", "Bold", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.82154351901468*^9, 3.821543521159072*^9}, {
  3.821543561881218*^9, 3.821543571748988*^9}, {3.821543608607204*^9, 
  3.8215437054669027`*^9}, {3.821543735725812*^9, 3.821543741394865*^9}, {
  3.8215438058107*^9, 3.821543862016954*^9}, {3.8215439111876*^9, 
  3.82154391565184*^9}, {3.8215439546904097`*^9, 3.821543975850164*^9}, {
  3.821544009563689*^9, 3.821544152200761*^9}, {3.821544185028994*^9, 
  3.821544263840006*^9}, {3.82154430080159*^9, 3.82154448613513*^9}, {
  3.8215445526912947`*^9, 3.8215445750733747`*^9}, {3.821544635452186*^9, 
  3.8215448352708073`*^9}, {3.821634036383483*^9, 3.821634037523005*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"c9fb6535-39d4-433c-8dec-25b8e069b0c9"],

Cell[BoxData[
 Graphics3DBox[{
   StyleBox[{
     {EdgeForm[GrayLevel[0.85]], 
      Polygon3DBox[{
       Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
        Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
        Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
        Scaled[{0.985, 0.98, 0.02}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
        Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
        Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
        Scaled[{0, 0.99999, 0}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}]}, 
     {Opacity[0], EdgeForm[None], 
      CuboidBox[{-0.4864, -0.25, 0}, {10.2144, 1.25, 0.024}]}, 
     {EdgeForm[None], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
        Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
        Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
        Scaled[{0.985, 0.98, 0.02}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
        Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
        Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}], 
      Polygon3DBox[{
       Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
        Scaled[{0, 1, 1}]},
       VertexColors->{
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[1, 5], 0, 
           Rational[4, 5]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[7, 15], 
           Rational[1, 3], 
           Rational[13, 15]]], 
         Directive[
          Opacity[0.1], 
          RGBColor[
           Rational[29, 45], 
           Rational[5, 9], 
           Rational[41, 45]]], 
         Directive[
          Opacity[0.1], 
          GrayLevel[1]]}]}},
    StripOnInput->False,
    Lighting->{{"Ambient", 
       GrayLevel[1]}}], 
   {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], Opacity[
    0.1]}], 
    {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], Opacity[
     0.1]}], 
     {RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
               83.}, {0., 0., 83.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
               83.}, {1., 0., 83.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{30.861532956569462`, 
            86.90149478662559}, {-149.1427048847096, 124.81141314441822`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 83]& ,
         TagBoxNote->"83"],
        StyleBox["83", {
          Directive[Bold]}, StripOnInput -> False]],
       Annotation[#, 
        Style[83, {
          Directive[Bold]}], "Tooltip"]& ]}, 
     {RGBColor[0, 0, 1], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {1.091, 
               1., 36.}, {1.091, 0., 36.}, {2.091, 0., 0.}, {2.091, 1., 0.}, {
               2.091, 1., 36.}, {2.091, 0., 36.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{74.80807945334065, 
            129.08180038265232`}, {-0.6566980453049496, 126.6979842061618}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 36]& ,
         TagBoxNote->"36"],
        StyleBox["36", {
          Directive[Bold]}, StripOnInput -> False]],
       Annotation[#, 
        Style[36, {
          Directive[Bold]}], "Tooltip"]& ]}, 
     {RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
               2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 37.}, {
               2.1820000000000004`, 0., 37.}, {3.1820000000000004`, 0., 0.}, {
               3.1820000000000004`, 1., 0.}, {3.1820000000000004`, 1., 37.}, {
               3.1820000000000004`, 0., 37.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{117.66310474007525`, 
            171.41286944474533`}, {-2.1205976239650113`, 128.5913780971639}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 37]& ,
         TagBoxNote->"37"],
        StyleBox["37", {
          Directive[Bold]}, StripOnInput -> False]],
       Annotation[#, 
        Style[37, {
          Directive[Bold]}], "Tooltip"]& ]}, 
     {RGBColor[0, 0, 1], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{3.2730000000000006`, 0., 0.}, {
               3.2730000000000006`, 1., 0.}, {3.2730000000000006`, 1., 44.}, {
               3.2730000000000006`, 0., 44.}, {4.273000000000001, 0., 0.}, {
               4.273000000000001, 1., 0.}, {4.273000000000001, 1., 44.}, {
               4.273000000000001, 0., 44.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{160.63052678828228`, 
            213.8955117222385}, {-22.34174762841934, 130.49163189686104`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 44]& ,
         TagBoxNote->"44"],
        StyleBox["44", {
          Directive[Bold]}, StripOnInput -> False]],
       Annotation[#, 
        Style[44, {
          Directive[Bold]}], "Tooltip"]& ]}, 
     {RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{4.364000000000001, 0., 0.}, {
               4.364000000000001, 1., 0.}, {4.364000000000001, 1., 37.}, {
               4.364000000000001, 0., 37.}, {5.364000000000001, 0., 0.}, {
               5.364000000000001, 1., 0.}, {5.364000000000001, 1., 37.}, {
               5.364000000000001, 0., 37.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{203.88243172360654`, 256.652948960035}, {
            1.1910608507471352`, 132.39878295386058`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 37]& ,
         TagBoxNote->"37"],
        StyleBox["37", {
          Directive[Bold]}, StripOnInput -> False]],
       Annotation[#, 
        Style[37, {
          Directive[Bold]}], "Tooltip"]& ]}, 
     {RGBColor[0, 0, 1], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{5.455000000000001, 0., 0.}, {
               5.455000000000001, 1., 0.}, {5.455000000000001, 1., 36.}, {
               5.455000000000001, 0., 36.}, {6.455000000000001, 0., 0.}, {
               6.455000000000001, 1., 0.}, {6.455000000000001, 1., 36.}, {
               6.455000000000001, 0., 36.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{247.14053829925393`, 299.6411767323335}, {
            5.988237953174007, 134.31286888838758`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 36]& ,
         TagBoxNote->"36"],
        StyleBox["36", {
          Directive[Bold]}, StripOnInput -> False]],
       Annotation[#, 
        Style[36, {
          Directive[Bold]}], "Tooltip"]& ]}, 
     {RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{6.546000000000001, 0., 0.}, {
               6.546000000000001, 1., 0.}, {6.546000000000001, 1., 36.}, {
               6.546000000000001, 0., 36.}, {7.546000000000001, 0., 0.}, {
               7.546000000000001, 1., 0.}, {7.546000000000001, 1., 36.}, {
               7.546000000000001, 0., 36.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{290.43059285388136`, 342.78823384567664`}, {
            7.664469278125409, 136.23392759475854`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 36]& ,
         TagBoxNote->"36"],
        StyleBox["36", {
          Directive[Bold]}, StripOnInput -> False]],
       Annotation[#, 
        Style[36, {
          Directive[Bold]}], "Tooltip"]& ]}, 
     {RGBColor[0, 0, 1], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{7.637000000000001, 0., 0.}, {
               7.637000000000001, 1., 0.}, {7.637000000000001, 1., 46.}, {
               7.637000000000001, 0., 46.}, {8.637, 0., 0.}, {8.637, 1., 
               0.}, {8.637, 1., 46.}, {8.637, 0., 46.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{333.8783715388673, 
            386.29661368060346`}, {-22.123491347556495`, 138.161997243882}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 46]& ,
         TagBoxNote->"46"],
        StyleBox["46", {
          Directive[Bold]}, StripOnInput -> False]],
       Annotation[#, 
        Style[46, {
          Directive[Bold]}], "Tooltip"]& ]}, 
     {RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{8.728, 0., 0.}, {8.728, 1., 0.}, {8.728, 
               1., 46.}, {8.728, 0., 46.}, {9.728, 0., 0.}, {9.728, 1., 0.}, {
               9.728, 1., 46.}, {9.728, 0., 46.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{377.48473791177173`, 
            429.8152864350566}, {-20.489964590379714`, 140.09711628578702`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 46]& ,
         TagBoxNote->"46"],
        StyleBox["46", {
          Directive[Bold]}, StripOnInput -> False]],
       Annotation[#, 
        Style[46, {
          Directive[Bold]}], "Tooltip"]& ]}}}, {{{{}, Text3DBox[
       FormBox[
        StyleBox["1984",
         StripOnInput->False,
         FontWeight->Bold], StandardForm], {0.5, 0., 41.5}, {0, 0}]}, {{}, 
      Text3DBox[
       FormBox[
        StyleBox["1988",
         StripOnInput->False,
         FontWeight->Bold], StandardForm], {1.5910000000000002`, 0., 18.}, {0,
        0}]}, {{}, Text3DBox[
       FormBox[
        StyleBox["1992",
         StripOnInput->False,
         FontWeight->Bold], StandardForm], {2.6820000000000004`, 0., 18.5}, {
       0, 0}]}, {{}, Text3DBox[
       FormBox[
        StyleBox["1996",
         StripOnInput->False,
         FontWeight->Bold], StandardForm], {3.7730000000000006`, 0., 22.}, {0,
        0}]}, {{}, Text3DBox[
       FormBox[
        StyleBox["2000",
         StripOnInput->False,
         FontWeight->Bold], StandardForm], {4.864000000000001, 0., 18.5}, {0, 
       0}]}, {{}, Text3DBox[
       FormBox[
        StyleBox["2004",
         StripOnInput->False,
         FontWeight->Bold], StandardForm], {5.955000000000001, 0., 18.}, {0, 
       0}]}, {{}, Text3DBox[
       FormBox[
        StyleBox["2008",
         StripOnInput->False,
         FontWeight->Bold], StandardForm], {7.046000000000001, 0., 18.}, {0, 
       0}]}, {{}, Text3DBox[
       FormBox[
        StyleBox["2012",
         StripOnInput->False,
         FontWeight->Bold], StandardForm], {8.137, 0., 23.}, {0, 0}]}, {{}, 
      Text3DBox[
       FormBox[
        StyleBox["2016",
         StripOnInput->False,
         FontWeight->Bold], StandardForm], {9.228, 0., 23.}, {0, 0}]}}, {}}, 
   GraphicsGroup3DBox[
    {GrayLevel[0], 
     StyleBox[{},
      Antialiasing->False]}]},
  Axes->{True, True, True},
  AxesEdge->{{-1, -1}, {1, -1}, {-1, 1}},
  AxesLabel->{None, None, None},
  Background->GrayLevel[1],
  BoxRatios->NCache[{1, 
     Rational[1, 5], GoldenRatio^(-1)}, {1, 0.2, 0.6180339887498948}],
  Boxed->False,
  FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
     None, None}}, {{-1, 0, 0}, {None, None}}},
  FaceGridsStyle->Automatic,
  ImageSize->{462.51953125, Automatic},
  LabelStyle->Directive[Bold],
  Lighting->"Neutral",
  Method->{"RotationControl" -> "Globe"},
  PlotLabel->FormBox["\"US Olympic Gold Metals\"", TraditionalForm],
  PlotRangePadding->Scaled[0.02],
  Ticks->{{{0, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {9.728, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.2275000000000005`, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {4.3185, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {5.409500000000001, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {6.500500000000001, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {7.591500000000002, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {8.682500000000001, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
      FormBox["\"\"", TraditionalForm], {0.01, 0}}, {9.728, 
      FormBox["\"\"", TraditionalForm], {0.01, 0}}}, {{0, 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1., 
      FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
      FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
      FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
  ViewPoint->{2, -10, 2}]], "Output",
 CellChangeTimes->{{3.821544775770897*^9, 3.821544836919544*^9}},
 CellLabel->"Out[62]=",ExpressionUUID->"b363a3b6-21be-4502-9737-307e90fadb69"]
}, Open  ]]
}, Open  ]],

Cell["For example, your plot might look something like this: ", "Text",
 CellChangeTimes->{
  3.8214578556373777`*^9},ExpressionUUID->"4e0e0f8c-8eef-4f3c-8085-\
c38b36c2a8ac"],

Cell[BoxData[
 Graphics3DBox[{
   StyleBox[{
     {EdgeForm[GrayLevel[0.85]], 
      Polygon3DBox[{
       Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
        Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
        Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
        Scaled[{0.985, 0.98, 0.02}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
        Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
        Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
        Scaled[{0, 0.99999, 0}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0.85]], 
      CuboidBox[{-0.4864, -0.25, 0}, {10.2144, 1.25, 0.024}]}, 
     {EdgeForm[None], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
        Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
        Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
        Scaled[{0.985, 0.98, 0.02}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
        Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
        Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}], 
      Polygon3DBox[{
       Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
        Scaled[{0, 1, 1}]},
       VertexColors->{
         Directive[
          GrayLevel[0], 
          Opacity[0.2]], 
         Directive[
          GrayLevel[0], 
          Opacity[0.3]], 
         Directive[
          Opacity[0]], 
         Directive[
          Opacity[0]]}]}},
    StripOnInput->False,
    Lighting->{{"Ambient", 
       GrayLevel[1]}}], 
   {RGBColor[1., 0.607843, 0.], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
    {RGBColor[1., 0.607843, 0.], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
     {RGBColor[1, 0, 0], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
               83.}, {0., 0., 83.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
               83.}, {1., 0., 83.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{54.159886220522765`, 
            149.71590406719943`}, {-248.6659170025817, 224.15129785450483`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 83]& ,
         TagBoxNote->"83"],
        StyleBox["83", {"Graphics3DLabel"}, StripOnInput -> False]],
       Annotation[#, 
        Style[83, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {1.091, 
               1., 36.}, {1.091, 0., 36.}, {2.091, 0., 0.}, {2.091, 1., 0.}, {
               2.091, 1., 36.}, {2.091, 0., 36.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[0.5, 0.5, 0.5], 
                   RGBColor[0.5, 0.5, 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0.5, 0.5], 
                   RGBColor[0.5, 0.5, 0.5], 
                   GrayLevel[1], 
                   GrayLevel[1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 1., 1.], 
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.], 
                   RGBColor[1., 1., 1.], 
                   GrayLevel[1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.], 
                   RGBColor[1., 1., 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.], 
                   RGBColor[1., 1., 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{130.24180317822504`, 222.74003823535736`}, {
            8.398652168204165, 227.4174007521449}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 36]& ,
         TagBoxNote->"36"],
        StyleBox["36", {"Graphics3DLabel"}, StripOnInput -> False]],
       Annotation[#, 
        Style[36, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
     {RGBColor[0, 0, 1], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
               2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 37.}, {
               2.1820000000000004`, 0., 37.}, {3.1820000000000004`, 0., 0.}, {
               3.1820000000000004`, 1., 0.}, {3.1820000000000004`, 1., 37.}, {
               3.1820000000000004`, 0., 37.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{204.43403749463772`, 296.0251797959017}, {
            5.8642940659989335`, 230.69531558884375`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 37]& ,
         TagBoxNote->"37"],
        StyleBox["37", {"Graphics3DLabel"}, StripOnInput -> False]],
       Annotation[#, 
        Style[37, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
     {RGBColor[1, 0, 0], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{3.2730000000000006`, 0., 0.}, {
               3.2730000000000006`, 1., 0.}, {3.2730000000000006`, 1., 44.}, {
               3.2730000000000006`, 0., 44.}, {4.273000000000001, 0., 0.}, {
               4.273000000000001, 1., 0.}, {4.273000000000001, 1., 44.}, {
               4.273000000000001, 0., 44.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{278.820857318999, 
            369.5727306173861}, {-29.143322642658006`, 233.98510655791887`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 44]& ,
         TagBoxNote->"44"],
        StyleBox["44", {"Graphics3DLabel"}, StripOnInput -> False]],
       Annotation[#, 
        Style[44, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{4.364000000000001, 0., 0.}, {
               4.364000000000001, 1., 0.}, {4.364000000000001, 1., 37.}, {
               4.364000000000001, 0., 37.}, {5.364000000000001, 0., 0.}, {
               5.364000000000001, 1., 0.}, {5.364000000000001, 1., 37.}, {
               5.364000000000001, 0., 37.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[0.5, 0.5, 0.5], 
                   RGBColor[0.5, 0.5, 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0.5, 0.5], 
                   RGBColor[0.5, 0.5, 0.5], 
                   GrayLevel[1], 
                   GrayLevel[1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 1., 1.], 
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.], 
                   RGBColor[1., 1., 1.], 
                   GrayLevel[1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.], 
                   RGBColor[1., 1., 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.], 
                   RGBColor[1., 1., 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           ImageSizeCache->{{353.7001846352773, 443.5960168268999}, {
            11.597561982371673`, 237.28683831868628`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 37]& ,
         TagBoxNote->"37"],
        StyleBox["37", {"Graphics3DLabel"}, StripOnInput -> False]],
       Annotation[#, 
        Style[37, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
     {RGBColor[0, 0, 1], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{5.455000000000001, 0., 0.}, {
               5.455000000000001, 1., 0.}, {5.455000000000001, 1., 36.}, {
               5.455000000000001, 0., 36.}, {6.455000000000001, 0., 0.}, {
               6.455000000000001, 1., 0.}, {6.455000000000001, 1., 36.}, {
               6.455000000000001, 0., 36.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{428.5902484649264, 518.0188563046529}, {
            19.902615713159094`, 240.60057600069706`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 36]& ,
         TagBoxNote->"36"],
        StyleBox["36", {"Graphics3DLabel"}, StripOnInput -> False]],
       Annotation[#, 
        Style[36, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
     {RGBColor[1, 0, 0], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{6.546000000000001, 0., 0.}, {
               6.546000000000001, 1., 0.}, {6.546000000000001, 1., 36.}, {
               6.546000000000001, 0., 36.}, {7.546000000000001, 0., 0.}, {
               7.546000000000001, 1., 0.}, {7.546000000000001, 1., 36.}, {
               7.546000000000001, 0., 36.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[0.5, 0., 0.], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1, 0, 0]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[1, 0, 0], 
                   RGBColor[1, 0, 0], 
                   RGBColor[1., 0.8, 0.8], 
                   RGBColor[1., 0.8, 0.8]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{503.5356218394088, 592.7166671214321}, {
            22.80457053402813, 243.9263852080195}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 36]& ,
         TagBoxNote->"36"],
        StyleBox["36", {"Graphics3DLabel"}, StripOnInput -> False]],
       Annotation[#, 
        Style[36, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{7.637000000000001, 0., 0.}, {
               7.637000000000001, 1., 0.}, {7.637000000000001, 1., 46.}, {
               7.637000000000001, 0., 46.}, {8.637, 0., 0.}, {8.637, 1., 
               0.}, {8.637, 1., 46.}, {8.637, 0., 46.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[0.5, 0.5, 0.5], 
                   RGBColor[0.5, 0.5, 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0.5, 0.5, 0.5], 
                   RGBColor[0.5, 0.5, 0.5], 
                   GrayLevel[1], 
                   GrayLevel[1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[1., 1., 1.], 
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.], 
                   RGBColor[1., 1., 1.], 
                   GrayLevel[1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.], 
                   RGBColor[1., 1., 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   GrayLevel[1], 
                   GrayLevel[1], 
                   RGBColor[1., 1., 1.], 
                   RGBColor[1., 1., 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{578.7540531705396, 
            668.0400134464562}, {-28.765469146540283`, 247.26433202356867`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, 46]& ,
         TagBoxNote->"46"],
        StyleBox["46", {"Graphics3DLabel"}, StripOnInput -> False]],
       Annotation[#, 
        Style[46, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
     {RGBColor[0, 0, 1], EdgeForm[{GrayLevel[1], Opacity[0.3]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             Directive[
              EdgeForm[
               Directive[
                RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.5]]]], {}, {}], 
            StyleBox[{
              
              GraphicsComplex3DBox[{{8.728, 0., 0.}, {8.728, 1., 0.}, {8.728, 
               1., 46.}, {8.728, 0., 46.}, {9.728, 0., 0.}, {9.728, 1., 0.}, {
               9.728, 1., 46.}, {9.728, 0., 46.}}, {
                Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5]}], 
                Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0., 0., 0.5], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0, 0, 1]}], 
                Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}], 
                Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                   RGBColor[0, 0, 1], 
                   RGBColor[0, 0, 1], 
                   RGBColor[0.8, 0.8, 1.], 
                   RGBColor[0.8, 0.8, 1.]}]}]}, {Lighting -> {{"Ambient", 
                 GrayLevel[1]}}}, StripOnInput -> False]},
           
           ImageSizeCache->{{654.2470374817005, 
            743.3811792615444}, {-25.937446082274278`, 250.6144830134832}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 46]& ,
         TagBoxNote->"46"],
        StyleBox["46", {"Graphics3DLabel"}, StripOnInput -> False]],
       Annotation[#, 
        Style[46, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{{{}, Text3DBox[
       StyleBox["1984", "Graphics3DLabel",
        StripOnInput->False], {0.5, 0., 41.5}, {0, 0}]}, {{}, Text3DBox[
       StyleBox["1988", "Graphics3DLabel",
        StripOnInput->False], {1.5910000000000002`, 0., 18.}, {0, 0}]}, {{}, 
      Text3DBox[
       StyleBox["1992", "Graphics3DLabel",
        StripOnInput->False], {2.6820000000000004`, 0., 18.5}, {0, 0}]}, {{}, 
      Text3DBox[
       StyleBox["1996", "Graphics3DLabel",
        StripOnInput->False], {3.7730000000000006`, 0., 22.}, {0, 0}]}, {{}, 
      Text3DBox[
       StyleBox["2000", "Graphics3DLabel",
        StripOnInput->False], {4.864000000000001, 0., 18.5}, {0, 0}]}, {{}, 
      Text3DBox[
       StyleBox["2004", "Graphics3DLabel",
        StripOnInput->False], {5.955000000000001, 0., 18.}, {0, 0}]}, {{}, 
      Text3DBox[
       StyleBox["2008", "Graphics3DLabel",
        StripOnInput->False], {7.046000000000001, 0., 18.}, {0, 0}]}, {{}, 
      Text3DBox[
       StyleBox["2012", "Graphics3DLabel",
        StripOnInput->False], {8.137, 0., 23.}, {0, 0}]}, {{}, Text3DBox[
       StyleBox["2016", "Graphics3DLabel",
        StripOnInput->False], {9.228, 0., 23.}, {0, 0}]}}, {}}, 
   GraphicsGroup3DBox[
    {GrayLevel[0], 
     StyleBox[{},
      Antialiasing->False]}]},
  Axes->{True, True, True},
  AxesEdge->{{-1, -1}, {1, -1}, {-1, 1}},
  AxesLabel->{None, None, None},
  AxesStyle->{Automatic, Automatic, 
    StrokeForm[
     Opacity[0]]},
  BoxRatios->NCache[{1, 
     Rational[1, 5], GoldenRatio^(-1)}, {1, 0.2, 0.6180339887498948}],
  Boxed->False,
  FaceGridsStyle->Directive[
    GrayLevel[0.3, 0.5], 
    AbsoluteDashing[{1, 2}]],
  ImageSize->800,
  Lighting->"Neutral",
  Method->{"RotationControl" -> "Globe"},
  PlotLabel->FormBox[
    StyleBox["\"US Olympic Gold Medals\"", 
     RGBColor[0, 0, 1], 25, Bold, StripOnInput -> False], TraditionalForm],
  PlotRangePadding->Scaled[0.02],
  Ticks->FrontEndValueCache[{{{0, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {9.728, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.2275000000000005`, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {4.3185, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {5.409500000000001, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {6.500500000000001, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {7.591500000000002, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {8.682500000000001, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
       FormBox["\"\"", TraditionalForm], {0.01, 0}}, {9.728, 
       FormBox["\"\"", TraditionalForm], {0.01, 0}}}, {{0, 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1., 
       FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
       FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
       FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Charting`FindScaledTicks[
      (Charting`SimpleTicks[#, #2, 6]& )[
       SlotSequence[1]], {Identity, Identity}]& }, {{{0., 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {9.728, 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {1.0455, 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {2.1365000000000003`, 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {3.2275000000000005`, 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {4.3185, 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {5.409500000000001, 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {6.500500000000001, 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {7.591500000000002, 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {8.682500000000001, 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {0., 
       FormBox["\"\"", TraditionalForm], {0.01, 0.}}, {9.728, 
       FormBox["\"\"", TraditionalForm], {0.01, 0.}}}, {{0., 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {1., 
       FormBox["\"\"", TraditionalForm], {0.005, 0.}}, {0., 
       FormBox["\"\"", TraditionalForm], {0.01, 0.}}, {1., 
       FormBox["\"\"", TraditionalForm], {0.01, 0.}}}, {{0., 
       FormBox["0", TraditionalForm], {0.01, 0.}}, {20., 
       FormBox["20", TraditionalForm], {0.01, 0.}}, {40., 
       FormBox["40", TraditionalForm], {0.01, 0.}}, {60., 
       FormBox["60", TraditionalForm], {0.01, 0.}}, {80., 
       FormBox["80", TraditionalForm], {0.01, 0.}}}}],
  ViewPoint->{2, -10, 2}]], "Output",
 CellChangeTimes->{{3.82145760008145*^9, 3.821457619112032*^9}},
 CellLabel->"Out[241]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzsvXeYHMXV/9tvV3fP7MxKGxRY5RxgZzGgTDImmySiBEggsDA5WWCZnAVI
RAWSRBSIbBuwjcHYGGOwwQhEMtERv86vr3+8vP69vr7PvX3re6rqVFVPzewK
BPeP+/I81eqZXWZ7uj/fc06dqjq179FnHv/lU44+84SFR4/eY9HRpx9/wsIz
Ru9+2iL5lvi3KMp2iqLk2tFRIs/zKOr7Yfco+p9f+p9f+p9f+p9f+p9f+v/7
L/0/OIjRxx13XCR2Wrhw4ekrV6688/7774/EI7fcckskfrhs2TI6w3/b9fJh
f8QhsR+GD1Ifg2OMzxIbLrjggkj8+qtf/erfzzvvvPzSSy+N4vzMM88U+bHH
HpvgLBL/dfbZZ//59NNP/9XixYujmI4iv+OOO/DbuMBeL+Q1/lYxriNKzJWY
RteS2GvBJxeuRahrwbt/kteCFolfnnXWWfHrF154ofjpFVdcEYnvX3fddWtO
Pvnks6dOnRqJhSNHjqzsh7+dvvHcc8/9+sknn/zuvHnz8Gl0U7bt5bKfavow
+n7/zDXjasPXjOula45xzWJf+XdjXDidZThrn4339scVZebLXCBfoP1KfiL+
em/f555GPMQ4isL3af4MwET4GTx1/fXXrz7ppJPUM/jSmDFjkn3k363yVxGz
zdfLcFbFl6ocQPca3+y2uXPnnkev1PG/5ecTZfhvZi9f8do+PrIY3zBK6DvK
72RaiLTgU0vxLc1Tw3c8etSoUVG8N74Uvm0F37ZK7NHX3U8353tX8L0zfO/2
A/GDg+iXL5B37s1nn312zaGHHhql59J79x922GG4sEO//vWv93oHvvZJRd/8
ISf2IZ81ZcoUtCjGl6fvHgmc/unoo4+mV/ReCfcj2Zd+itN9dVPv0T2qMAeZ
4gA35ADdohjHDG9VcY8qB9OvXHjiiSfm7777Lt2o0tn03jMLFizAN6I7NKOX
G3X0xqAS43b0xRi9Jv8P8ZMrr7zSCsHeo1bcjypuQqzuB9T+56OOOopepXw/
iA+xP9Ozv25Rylqp4n5UcD8y3I/kEPplnB6im3qvPId+cJG8DtytWw4//PCo
BEbis+gH/1teNL4q3avpvdyyvft4y/riUFhaMY6icN++Nm3aNDR139K98I3x
18u4eWQVBcusRMJKjtH30kgtZYuZ4CzjW1dAqYrbVMFtKs3F5x5KNxqnOLvk
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
J/JDVqz4MF+0iJp8pY777PPPfOLEHE0+cRxF/uijH+YffPABXciu6nKwrtl0
c4x0QeeZixcvJruYcnZdBcc76xaVOVhK2bGp1DyPmdcRex/9ziYbu2zoigna
laeffvppNF4AaNsAbScH/4L7uLEf8ney7ezYnRn+3ty5c9XdsClfg7BCupPn
i1G3tbWP5tUuro79ZG3Kq/njwMiB4JmnhaWomd8hSP15YIWxy+YzDguzgmyo
R+i32JUkTH3Lt9g6Jq51xL+CeE/dt6j99re/lc9Wsi0Ad1TJn3nmb4S4aatX
f0S4g+8zz/zI/BtrzKdMIcTxL2M+enQuaaMmtSWPaf5v/4YfHHbY6/lrr/2W
REcD9GpVRmKqIpjgSnD2VcHyBd0isnyKnZ10i1rUe/DZHD6MKYK/nMHfNKOu
hW5NrAJQk+YB9Wjx3HHjxiWfl3+aYoj48+ZySQc0zFHifs8QDjxthzeUzaF+
T+zkda7eZZddIBB61cmTTex6HOoJC57bT2ZcbPSM/rTp/KWs0VqaUMc4bRpz
UsKlDL7Lj61evVpYqluLVNO/sKjua496JrvMNN9330dM9ZIlTDWe9UdSOAB8
v/3+RWTLZqAeMKAA9XAH6tGjrwfYkZ51gpEQPw+vcvMPrF279tWf/vSnmu3E
ZZuIABspKBE74ll+PjKnHIjUkX0OfVJfu1abxp4D6zZ1cbhiRCYbsGwbtRcj
leBhyltUcsdzXRmOHTzOon66q25RiTVAYQrlNqs4o5xlxv2GsspSXiOjbuBP
r0qcEqr6GXGboSxkvwtuYKNqbFT8bJDyA4fq5kzfK4ztkRugHn8cmMdgVwMI
P2tk51gpuw9xoCmZFDpk/0nTfK3lL3vxjZGJtP75n/70J6gkxklUohDn2Wf/
zmox4Y5UShRbnaSeTjwP0A51TCF1JKSOKLoonzfvofyPf/yjFgiqK/kTbFXN
qa+cffbZZOgLSkixDibeHtSoFTHetMBRRU2ozsanOoBtZXHqrFmz0CKy9jFf
c/XzRgcCZx070UUZrdC3pE5lJ8SQchDUotyeyUTYOV5q/jNrgybrCD8HZse9
YyodwUFQQQfVwNhPaBS74UTVTxzDU08w5n4i5dOrwLjYuUOo0KI7d04ULknD
McuffvqvhCiMuo7K8a+Jwk3EglcxIZoYWOlfadUJ15nAtSOP41ySfdxxbxCz
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
3sr/9Wx2mJ/ra8t4i9zJfP+abrh9FC+Qd6wgTi13r8kNUhHBPuIGvf5h3OCT
FKljHGvKlOPhBv3iuFxmS7iOLaEetWonKsiv9I9k5d5SGoXG+FSXtCkMypmC
e84BmQK9vl97wh+ol1wRKxhKVpAOCVTODHwRO0bw2AxQEj9Qjh+Y0eU4GIy6
GVZQhhV0A+P6FscPyMYcR1AeR+gpjtAMRxgYxwsX4tm1LazTYfsyenavMbih
gTWGXTzY2GcGkf9b7pMB339mMcBHanyAT52AUbx1JekJ/Iyhf93pAljqf8DE
vlKFeqx0fYGv3azLvfrfX3cmXE/W15YS6xUm3vTPhfiofeKVQ/zKs866V4if
IcR33uPEd3T7lW8svHsWfd36fw51c4b66/B783gZlkQx9MHFGeD9K/nvu28j
NafolY8R1stgPUwdqEDAx6l0hJZ55p2Y7y/M72OZ199+KTMfCvNhIfNhvGbN
Ghq6QwCg0tQHFAZY6IMoDXwTA69DawZ+KVmSAzy9Xhzf9+OV1BsfLw3/GGDe
NdatMZ752mvjTfqZl9MzLsv1072sv7fTi4uB93/fvZ24v+rpxLB0jNiD0H1k
u5psMaHNLGa7Gsa9Lwrs1hSTAWMBvqZ/6Ro2wDTIrrd58/6Nv+27umzW5Wl8
bYi7u+3kk3fEZjcL73KttblXnub+owJ/KQ3/jA8n/F1Rq0/mHWB/1AeRA0Su
A6BYE/B1BLCxIrtkP3IWx/3udzvIArqmLWAwn9DgnKkSZHKSqqwJ6L7/VNRT
wX9fbLtzTOAuvFNiAqoGEzCJ6rMmsHz5qzzSjSPGLP/N4L8H7daI2ATWwgRQ
8j7AHkA+0F18YDR8oIl8wGxJRpuvfQAlYwWm3ZeuQIVp7djRyOlzjUseFyhV
+b6tnrbff9Qq20AwHBbQQ/ap/I05v4K5RzxgdprMn/9/BLH5+onY0xIk+1sA
+tfIL8LqW2IisRN8+ST6NsmO2PW6bGWviJvZGs4801oDz8PUag109+8RFmB9
TFCHRK8fgzXQlotg4Kf3jCvs8j7MjCso1F2NK8z7IlaCsCuMQ/1lGxfo3riN
C0LUdYW+YDZc5ZfNWmeAK5izdbFs1ppCBaYQ5o55ML2BdLZirAFe9K07yBRG
iilMIVOIKGZnU0BJfMFEB5mBAbNghS0BJXEFmsWmtZGvWVdIe8J48oQQI+/W
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
DTfE23R3ToGADACmBbD6T4U++cyyqRTTSLFl1d9F1D8T6lecM+C003wIRLUg
kHL/AYLAPruGQHYZ8GeCJA1wxxD43C4iEBkEtM1r8aMcDwA0Cvvum6EgRF1f
SEGyCkAW5KQ4AAM2d+5A8f4KEOhSlDsXn0gq5eaik2+niH+s6H+8o//VrP9Q
9B9W0T+Ge6F/XYz+KZmQ4iYA+semKnR0B4j4yxB/D5p8DB0CnqDHdRhQzMDs
2VtoBAkMdBf/JwYGAoEgtBBQI5CAkAw1VQmCLAj5dKxYgIu8GYj5W0T+gzkb
zmmn7bTyj+0+h9obgRQBw4SA8vtPgC8RdocJcPL+pZa+93ZbgM+aeIfqFo/2
I9R1NWhf4ocomW2P9Ccj2k8rf0xO+bxnIqV8Vj0pv4sofxqUX491Yo78H6SH
tfJXhfKPKM8Gyx8laQEsAStX/kkISMQ/3iP+MC1+er1a9343I8LBGDpLvgLJ
q1h3dfDEN99Mwc8GesKU7lUNusf2niine6SCstvQB6CeAd3vzbZ/9tnQ/eI4
nSqmBuUro3xshhTljxHlT9iTypeRn7TyMxkvUx1fn/Kpz3uIR/kl1KUqsY9v
qUnkzGlD++jhDpJEr2Mh+gFVEr2S+G1KukWn/IG2tiLOnyK6H066j1zdoyTS
N9afi/uheiSTgumrtO4Ds5MWskf/tj/qCiTfDMn3ojPSInRZ9fNuge5R8tIn
2d90E3Vxu6WlP4ikb/ZVPKUtX0sfhdSf9H+N7Wcin8gVvuRIidw8wFb7iPJJ
9jMh++6cKMV4PmVeID5r1j7dfa81/WCSyH50ddl/5MMgexrq/IpH9vWowyqG
n1vMEbmTxSx6En5i9C1Vs6aS6undftyKPuiLug2C388a/YUXitGrnOSLRjoh
eV2CMCd5yB2rjRHUT0FdhtonktpDV+30pI7eFet99uyt1JFFWD8WdRlSL0Pq
Wunf+x6e+ac/jbey1Su/4ousHmtuPdl0Xc3bbdajRfPjizQf1az5VJDTIpof
sqc0nxrkTzTvSW6cWpbp03xn1MdD8zoi3W8/fD5HHBH/Un8+PwnQzb2RF4S1
I3xxzMidl4XwbbrgASL8GRB+16ppSK36F51yB+3ZRFS/D+o2CL8f1hY56n+I
Hs+qPyxUfxQ/+eSTVv0oCQCKf4NVqxIA+goAZQDQG8tj9C06QmcK1tMTOxTQ
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
QMIGKA1SSRqhgwBSV8yfB5TFm2hagd9XaFKFNJmWCIMdaIlUmicWLXDCIMEo
oagCiurRkZAY7llbEpqU0LTD0HTTTchYxyBVAFI3ZBjHuNvll1uaUPJA5Zui
yAUqfaaN8jDVQ5hqK8pkHdY4hGDaIPBEbVA31F0h+n0MUwczU3ZRph239p0u
+l6ZMlM+4b2aF7Q5o2mtjbmGcTcwtBa88JjCtzng+4Jz3xd4WcK8DFe1r2VO
rWnr7WmWxqI+OgPVzwKMwP004HbJMuWdgEzmT5TDk019NkpQauFcl9gfy7n/
6LN1YKLXGw1L116LHhsj1EQIRS5CKAlFplHKhXJojgCQLkGYA4jhIYAaJIoj
gIYTQLYteo7aIpVGiB52uyUIew1uuqkF9JRBzziiJ4z/rAX9ArdFCnUmntP/
fMETyuHNtQ2Syp0KZZa2vUF9nn1RzwI3fTkR9s035xNh+9qkzNJmxfzo9khi
uD7CT7k6P+7RpHZt54EsvUPeEz+NB+pODoYR1ulyqGZh+Fe/+lWswVnGbHwJ
vBiGGntorp7R972uC66P0Z2mOZqrt/Xr5/Trzqeeeupu4qgr6hPBUec4/shH
INajjrIwoVie7i6I8KpNSa5cSUTp1snSRKnVBnkSCeaRwiwROerChVApI9UG
pCJMt2eaJpUjyxfovfDCC5YslAQu5cCF+V0MJgwXrirgqgExk77l4ostXM/R
Y6fhIrDuuotGEgZKq1QBV92RA5oDPcD1Aj1mCi7TOlm2JNDDG5w6bjByuUKj
ZBMMDxGumjnPtlmR7uTZrjXa85E1SMiasGtk2SSI7qppNwl6+7Op4Zc1GTt4
1DrgtaCv2YU7dIepmzWBT9glpXwfelQt9j4mKneGZO0L31JEARDdHH0F9WiC
KXRh0o/wM475vDglMy7p+UoLFGCyaQpHCUstYEl50hRGcTZNoQClO0llYWmo
h6VQWAqZpT95wjwMdWOMBK2UStPEkn3ySYIJJ6q5II0kkCIXJJSEJSUsvSgs
JRiNJ4x0hHfFFRYjlDxJRS1U6txCIklJC5WQFApJs0BSI6fqNotyN0mMVzNO
dPdj+ndaT/2mkULS6N1DUjazokvSRKpLnXU7M1W3PRjynj5v3rzuybKeUrT/
/vu3HXPMMZ/XtMyyaxH67xZiDkY9w0NMiLquBmL8c5QuMY0SyxExg/xpDRNo
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
j8b0trSj8VsafHNl1bcwsraRXGZ+Pfs7LGDx4YjLAxbHiHGhxWXzuco5Yt4p
4zH1vbZ0ZofHBk4MwasdOEgBfS8NdRcidsDhEZjFMCK/akSWTmQZEPmq2kT+
xjf2wlSiy/qq+srXGL7GWCcZY4Qbk4gUTj+dnj3VxPT8MKTFBgndbDty8rMJ
X20666yoB7vTyr5S+Jd/oXDxxfTeXHIJlXWXXkqf/uu/4r3SayYLRZZOZGlE
fuWVV3iVFkQe5EReyiIrvq5kREbjDriKiSt+yZ6DyuetWrVKn4vFLjdpl5fV
6LI9Pb1alxcUu9ztPUjVujwH8fiAyyVEVeRyOqObcRjjYvTDGPNOcvq2mbOt
cCHBOx5COYOFM3inM3icM3h+zuAXuV6wBouAwVfXZvA3v7kXikZ962gMR2Pc
oRBjlXOMdVYxVmsoVMT01P75n3kdcHcbjpzynPHM6Kl6V88YNwrG2Aohxv2O
FD796Riz43iHcO8Rtnn3rvpab6nRs7beCs9bdMAY5y5CXA5lh2N7RPqq5y3X
IS+npXPlSavU3A+ccMIJ0UCYOx3mTkzNzd+w0AfmFt2p0K25/RAbOvgLejRs
9B2KuAr6Cp4DkXwV8dfG4XpEUeSwzDosPIcffFA7XOccboXDB4XPeElF5tfd
HH/xs5/h2dxySyccbofDAzC/gWHwT35iRUZLXdbdsRsGX1ubxrfcshee0md9
aWsMW2PsSBpjx4cY62tiXN2LcUWA/i7KqaQNX0upvHfINy+4H+bJNyqsgLD1
3Qsbw1cKV1xB4corY9xqROGqq/C+XU059E9/8kxWvsloqcyRPlHKuByNh8dd
8Hie8RiXkrTHG5gQz+PKk1hcSL8Ah7mQHuo8HhP22J6ZsCgqPyewDzwuHwTn
POYJrUbt8c+evu46iMt97wcRD8op/GP8cjOt9SPvUlJ6bUY5L4wDRl4aBFtn
W+GsKDq5JqOu0ZZHvtMRO0DtdLZW+tZiJJXz1u9+a/T229/eCzHph/aRnsrp
GcPOGK93TF0lhfPPp0ClsCTz9L6RSYK3qXIBvfqzP9aOf/zjUQ/2qIWCxvCT
wjXXxJhii/EcKVx/Pal/ww14r7BbWqCAxnVddMQCkatoZQSGvLhxUE842464
CwLX8dlZks8WthargMWhiSxhLG5q4hqaLR7tLB5Wm8X5OxjsfvD7YHHVty6E
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
dkZpZ+xjSMPRCD1lfPOPf7x67a23boMoThbVV3ujK7PpGIZt1qJGZ1E7W6R8
i9BqFcnvjBbVItIALVJhn7N9+3bIRJ/lRTISsUjTnEhTWSTpi8SlmKdS5VmB
nEqjnUoT/35UEvjlIwIqtSK+01PpLjc7XaySX3sZlc796le/ip6F36iuVKUG
v2uBOva/5YpJ9qUU8umD9NtEVicGa4Guci67/fbb19522zbIQgD2wrEllXfb
jPTdmrw0lkZGrYgd0Gg076MgsZtu8rrpkUQtNklj06ueTR1FNi3DWz4ga1Mp
YJPtloxJOZtEwKZ+zqZOYxMudDU17XDFW96mwkkBLt7YJC7exjubxux3m7Lb
EvALV1oelV/wwa8eGXBpNOLZ7BKlz3/8R3bpdkqftxudcuOZuoBOdfrnYkjr
dJrOseQXbr49WrSSlcs+bEfLOa3w3wKtDjEvbXS01uodK1euXHvnndu46BLZ
0wf7Ynt8emkAIMYJpBZOmDJatQa0krVoJQJaHVqLVkGjFJ8ZaYxCk25YZKV6
4YXd3O1iBNSCuAI+jcSlanclFVK9rqVS3UslAlJNdbMFQ/erVOV7fdQoFZm0
CnE4lgnjDU+lovewQKtSVit/xhZE32bOXsJNSkkSl08xpU5xzYeL+lzPaVOU
3z+lAmUeRql3pufQ3Xdv43ObVI/s917tLrC8rxW9DtiAjtc7UlnHxV0n9GlE
Zvcc2oY3LetQ5ZWfum+CQu/CdZISLhkeVqVDKyo4hLM7PIeUc0iv+eFJBegz
2unTzPooXx+0tFuqPOnGqr0KgTClEM128gwol2fu/pcntAShTJ5TT2V53oM4
LyCPRGxwJV4qT5zK80Erj56ajUE1HvOLsyhXlenPEC9N+b/1gQee5jJJ9Mix
Bqra/RfjzP6L2KYaC+OmOAVmBhQQiKqoLwndr6i7ETgAEKI6RFWLDO2FMuiD
bOyAR5TpgN4El6BQki1DXIFXpQGvirtko3sTkRWicAJBGSH83mSBE6K0v4QY
OCUgRFdUvCaHV3yGjOhEPDJghMoakQ56VMCIL6Rwf+uee/7KL/g+7rtfxY6/
vLmv3mNQPvHAA5tvu+++NWhRP47y8u9//w4od+f6e+/FRosG7053XlmkTwba
YRiXFRnP3aooA4wPrJnxhVUwTg1PzTAuDONr16aMT3OMT80wvtNVTNUwLh3j
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
BzIrKx/qgY6jOYHsfKKWz4T5TO86H3VPENNEeOy75COgp4JPLJ3+yU8A6c47
NaQ4k7mkC+nPHR2L7r//foJ0L2OiffKElOwcpKhLRToZN+wO9Qn6miYCJOmc
A6H9GT4JJmlxhs+VjInOYPhQ7T0hyCdWHD7mhSFhPtsXzsc3keSzBDrD4POB
yyfFhEy4fN6fNEnzOTXoH+Lzk9x86LIQq725G9CYzxkYHo3Gq6UJDV1FW00F
sqdfd911ms9Y6K4hPu9ZoJLJx2H8s5rhs0nzaQy2/j6foeXFpxZfWqP4oGia
Tz30OI+PNJbHJwZNMSGLMZAWMpA+QHkXMV0kH1L/kkIym3qCVIMvrTVNJP0C
MsRHkvrpT0OQbCjnJLXw3mNkjWT4pFHU6tyQ2ksGKdwfIkjV+NI6BtJu0DEM
JCcLpPc6OnZ64okn6M+F+oxfakjjc0NqLC9IVfjSegYS1dRLGEhxJm7JICSa
oL+H4bNzVj60eKrG51NXBnwq8aUNDB9q6Q9k+CSCJiI+CYbPlQyftbn5JMuL
Dw36GxWfWz/5xS9Axaujf/KTU8HHwf2x8Pquu9IfupCSTNKEC0m2+RrSKQyk
VXSSzW5yS06vpjDgmrFrEzW4WKnAOWFwxKzJZPbTn5KR9ocODOF6H/+CyZzD
4NpX4/p3ENcQ0NoyK6RGGki2N7l8GkrHJ4Xva2b4bA2dxfCJQVNM8GwG0gLG
UzQOWYSyT9WQqMc0OQip2odUawWH/t5p6h6AhD1JYp9aGEijobszkGwGEgVP
UfIYWSMYExGfQ7SJFkfxSeTmk215bxH5JLSJYq2ZkGqh6xhIDpSLW6j2royC
dH5WSFSPx4KQ6guElO+Tz7JU4V71TcM0QdM8CtIDnz3zjLqdoSRzLLQR97EC
pLvv1pDijJOSLqT3Ozp23LhxIwqj+Lwf5HNrVj50h5fuQ2M+2CzknzAWB9/X
S1G55ZOnntJUVkDHMVQSDJWES+UvkyYFqfwqSOValHIQ2qTarHyGlQ0fm76P
cc006FKDz0cunyQTLRHF5zbNZ2/Ij1DKBbn5DCwZH7NXhD2J4fv6MP7pCz04
xOcvFoBk+seJ4nMJw+egKD5+S9+nVHxEmA+1XH0Z/5wGNHHcGwknQu65x+OD
jUNkRyFay0TsPCCq0e08h6glE5F5SWMxEHnXChWA6JZPNm5UdxSUvlkNHUyI
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
jXe7VG3pYnLRdv8vlEdIrPS/WprZBQ==\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"e4165c1d-bbde-4c11-aa60-6b3a2479c2ad"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1032, 785},
WindowMargins->{{Automatic, 198}, {Automatic, 27}},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c9b350e9-2c7f-4225-a351-9ed10b7e7d11"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 372, 9, 117, "Subtitle",ExpressionUUID->"b86bb7ce-3c34-4853-8560-666bd8d2c98b"],
Cell[955, 33, 455, 12, 58, "Text",ExpressionUUID->"39ad26a9-f3d1-431d-a78c-58da09a2e21b"],
Cell[CellGroupData[{
Cell[1435, 49, 394, 6, 67, "Section",ExpressionUUID->"37895bb7-5d19-4eef-9ba5-b6958a54d69a"],
Cell[CellGroupData[{
Cell[1854, 59, 162, 3, 54, "Subsection",ExpressionUUID->"320c29a7-58b0-4773-a88e-9f79f9ff6bbe"],
Cell[2019, 64, 300, 5, 32, "Item",ExpressionUUID->"2a37c3bb-d21a-4fe3-841b-0aaf0f55ff3c"],
Cell[2322, 71, 480, 11, 32, "Item",ExpressionUUID->"041839ee-5412-4a8b-bd6c-dec99a44bc4b"],
Cell[2805, 84, 440, 9, 32, "Item",ExpressionUUID->"42b6416d-2115-45a2-9c1d-b45072a6b665"],
Cell[3248, 95, 543, 12, 32, "Item",ExpressionUUID->"28517cb3-5b9c-4de5-8a58-7adcc7d1ae96"],
Cell[3794, 109, 269, 4, 32, "Item",ExpressionUUID->"9a628969-2c34-471b-9850-617d527d7b57"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4100, 118, 198, 3, 54, "Subsection",ExpressionUUID->"d46d30f9-ee26-4d75-904d-a0222ee77251"],
Cell[4301, 123, 832, 17, 173, "Text",ExpressionUUID->"72259a4c-cc24-4689-9920-94b06be6f4cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5170, 145, 156, 3, 54, "Subsection",ExpressionUUID->"2c75cc1c-5c4c-47b5-ab7d-39fd10f92b6a"],
Cell[CellGroupData[{
Cell[5351, 152, 405, 7, 53, "ItemNumbered",ExpressionUUID->"5fe81e2e-d19e-4aba-87d0-0b859345d14a"],
Cell[5759, 161, 18151, 414, 109, "Output",ExpressionUUID->"14cb6647-c7e4-4388-b8f4-fd18eb6ceaf7"],
Cell[CellGroupData[{
Cell[23935, 579, 559, 15, 52, "Input",ExpressionUUID->"0ff04110-ede9-43d2-aec6-478184365530"],
Cell[24497, 596, 18098, 407, 109, "Output",ExpressionUUID->"55d0652a-4cb0-4f9b-a8d3-3530f6b4ae03"]
}, Open  ]]
}, Open  ]],
Cell[42622, 1007, 427, 7, 32, "ItemNumbered",ExpressionUUID->"708e6fc6-7a1c-4ec7-affa-236ed8fe5dcd"],
Cell[43052, 1016, 324, 7, 35, "Text",ExpressionUUID->"12e2fe76-85a0-4065-9447-79c98083a085"],
Cell[CellGroupData[{
Cell[43401, 1027, 289, 7, 30, "Input",ExpressionUUID->"dead6932-3629-451c-a20e-5f663f8b7a46"],
Cell[43693, 1036, 230, 5, 376, "Output",ExpressionUUID->"8e15642e-c641-4f38-8739-9b14777e5f25"]
}, Open  ]],
Cell[43938, 1044, 225, 4, 35, "Text",ExpressionUUID->"bfbb293a-ba49-48f2-a7ed-b83fcf3e03fa"],
Cell[CellGroupData[{
Cell[44188, 1052, 305, 7, 30, "Input",ExpressionUUID->"e3955862-485a-4a44-a1df-3f1682fdfab9"],
Cell[44496, 1061, 488, 11, 330, "Output",ExpressionUUID->"038c920c-7a7f-4513-8b71-e659f2840f20"]
}, Open  ]],
Cell[44999, 1075, 287, 7, 35, "Text",ExpressionUUID->"bc8a4580-53ad-4fcf-b3f9-23039b40df8d"],
Cell[CellGroupData[{
Cell[45311, 1086, 271, 5, 30, "Input",ExpressionUUID->"83f7e64f-f269-46af-84c9-4f0dfb18991a"],
Cell[45585, 1093, 224, 5, 46, "Output",ExpressionUUID->"cbb761f1-4ddf-443b-aaf3-2dd3e2063133"]
}, Open  ]],
Cell[45824, 1101, 579, 12, 58, "Text",ExpressionUUID->"2816b150-870d-42d3-8f70-5b0281b4219c"],
Cell[46406, 1115, 2882, 66, 207, "Input",ExpressionUUID->"5d4e8311-b2cf-4f19-8d1f-a5414ce174a6"],
Cell[49291, 1183, 477, 13, 30, "Input",ExpressionUUID->"3f9d6a65-e3f1-4bf4-8c46-30c6576ea8dc"],
Cell[49771, 1198, 261, 5, 30, "Input",ExpressionUUID->"4842712b-d60e-4a71-b63a-1807e4ee26dc"],
Cell[CellGroupData[{
Cell[50057, 1207, 1137, 31, 52, "Input",ExpressionUUID->"b50a69a0-10b6-441c-81b6-05c0b6cc158e"],
Cell[51197, 1240, 1954, 51, 109, "Output",ExpressionUUID->"d2c2b715-c4c5-4735-80aa-ec6ef1378866"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53188, 1296, 1111, 31, 52, "Input",ExpressionUUID->"fa683601-e312-4400-8213-4ede4a931491"],
Cell[54302, 1329, 2730, 65, 215, "Output",ExpressionUUID->"13a92655-453d-46f5-b2d0-dbca225a3bd0"]
}, Open  ]],
Cell[57047, 1397, 187, 5, 30, "Input",ExpressionUUID->"07553e60-03bf-4090-9b23-07cd36aed42e"],
Cell[57237, 1404, 152, 3, 30, "Input",ExpressionUUID->"922f6c22-b746-44c9-9ff5-c82969c1e88e"],
Cell[57392, 1409, 152, 3, 30, "Input",ExpressionUUID->"4eda6e6b-43cc-4b8f-a7fc-b02a4af14ec1"],
Cell[57547, 1414, 151, 3, 30, "Input",ExpressionUUID->"390afc1f-d0cc-4174-9eb1-4d798fe367a2"],
Cell[CellGroupData[{
Cell[57723, 1421, 560, 10, 32, "ItemNumbered",ExpressionUUID->"6460263c-6c78-4d25-98ac-c1c1d37fe8a5"],
Cell[58286, 1433, 364, 8, 30, "Input",ExpressionUUID->"1e203a68-aa8e-4530-91ea-3d4a6c4ece6c"],
Cell[58653, 1443, 325, 8, 52, "Input",ExpressionUUID->"cab08cb4-fb8b-43e4-844e-132e8a843c6d"],
Cell[CellGroupData[{
Cell[59003, 1455, 176, 2, 30, "Input",ExpressionUUID->"dbc48f68-da6a-441e-8693-d25f52bcfbbf"],
Cell[59182, 1459, 280, 6, 34, "Output",ExpressionUUID->"a296d21c-370f-4271-bf58-2bcb848c9201"]
}, Open  ]]
}, Open  ]],
Cell[59489, 1469, 700, 13, 104, "Text",ExpressionUUID->"fd5e17b4-688d-40ab-8ab1-ecf7b314aa77"],
Cell[60192, 1484, 346, 6, 30, "Input",ExpressionUUID->"e1160738-538e-4c9e-8738-ad034740b914"],
Cell[60541, 1492, 343, 9, 52, "Input",ExpressionUUID->"efc50fdd-a0e7-484e-aa63-cafc7dcdeb80"],
Cell[CellGroupData[{
Cell[60909, 1505, 178, 2, 30, "Input",ExpressionUUID->"f0662045-bd21-472e-930a-34dea130e542"],
Cell[61090, 1509, 298, 6, 34, "Output",ExpressionUUID->"4715d376-a802-437b-8405-5ed20e7395de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61425, 1520, 889, 14, 74, "ItemNumbered",ExpressionUUID->"c1eb0107-43b1-4db7-877e-c7f587240c0b"],
Cell[CellGroupData[{
Cell[62339, 1538, 1492, 28, 73, "Input",ExpressionUUID->"c9fb6535-39d4-433c-8dec-25b8e069b0c9"],
Cell[63834, 1568, 35802, 947, 358, "Output",ExpressionUUID->"b363a3b6-21be-4502-9737-307e90fadb69"]
}, Open  ]]
}, Open  ]],
Cell[99663, 2519, 175, 3, 35, "Text",ExpressionUUID->"4e0e0f8c-8eef-4f3c-8085-c38b36c2a8ac"],
Cell[99841, 2524, 239098, 4189, 600, 33082, 811, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"e4165c1d-bbde-4c11-aa60-6b3a2479c2ad"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

